/**
 * Copyright (c) 2018-present, A2 Re≈°itve d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
 * the License for the specific language governing permissions and limitations under the License.
 */

package solutions.a2.oracle.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import oracle.jdbc.OracleConnection;
import oracle.jdbc.OracleStatement;
import oracle.jdbc.dcn.DatabaseChangeRegistration;

/**
 * 
 * Oracle JDBC Wrapped Statement implementation
 * @author <a href="mailto:averemee@a2.solutions">Aleksei Veremeev</a>
 * 
 */
public class OraWrappedStatement extends OraForwardWrapper implements OracleStatement {

	protected final OracleConnection proxy;
	protected final OraForwardTranslateOrRecord translator;
	protected final OracleStatement statement;

	OraWrappedStatement(OracleConnection proxy, OraForwardTranslateOrRecord translator, Statement statement) {
		super(proxy);
		this.proxy = proxy;
		this.translator = translator;
		this.statement = (OracleStatement) statement;
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		return new OraWrappedResultSet(this, statement.executeQuery(translator.translate(sql)));
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		return statement.executeUpdate(translator.translate(sql));
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		return statement.execute(translator.translate(sql));
	}

	@Override
	public Connection getConnection() throws SQLException {
		return proxy;
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return statement.executeUpdate(translator.translate(sql), autoGeneratedKeys);
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return statement.executeUpdate(translator.translate(sql), columnIndexes);
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return statement.executeUpdate(translator.translate(sql), columnNames);
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return statement.execute(translator.translate(sql), autoGeneratedKeys);
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return statement.execute(translator.translate(sql), columnIndexes);
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return statement.execute(translator.translate(sql), columnNames);
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return new OraWrappedResultSet(this, statement.getResultSet());
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return new OraWrappedResultSet(this, statement.getGeneratedKeys());
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return statement.unwrap(iface);
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return statement.isWrapperFor(iface);
	}

	@Override
	public void close() throws SQLException {
		statement.close();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return statement.getMaxFieldSize();
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		statement.setMaxFieldSize(max);
	}

	@Override
	public int getMaxRows() throws SQLException {
		return statement.getMaxRows();
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		statement.setMaxRows(max);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		statement.setEscapeProcessing(enable);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return statement.getQueryTimeout();
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		statement.setQueryTimeout(seconds);
	}

	@Override
	public void cancel() throws SQLException {
		statement.cancel();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return statement.getWarnings();
	}

	@Override
	public void clearWarnings() throws SQLException {
		statement.clearWarnings();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		statement.setCursorName(name);
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return statement.getUpdateCount();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return statement.getMoreResults();
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		statement.setFetchDirection(direction);
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return statement.getFetchDirection();
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		statement.setFetchSize(rows);
	}

	@Override
	public int getFetchSize() throws SQLException {
		return statement.getFetchSize();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return statement.getResultSetConcurrency();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return statement.getResultSetType();
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		statement.addBatch(translator.translate(sql));
	}

	@Override
	public void clearBatch() throws SQLException {
		statement.clearBatch();
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return statement.executeBatch();
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return statement.getMoreResults(current);
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return statement.getResultSetHoldability();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return statement.isClosed();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		statement.setPoolable(poolable);
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return statement.isPoolable();
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		statement.closeOnCompletion();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return statement.isCloseOnCompletion();
	}

	//
	// Oracle extension redefinition...
	//

	@Override
	public boolean isNCHAR(int index) throws SQLException {
		return statement.isNCHAR(index);
	}

	@Deprecated
	@Override
	public int creationState() {
		return statement.creationState();
	}

	@Override
	public int getLobPrefetchSize() throws SQLException {
		return statement.getLobPrefetchSize();
	}

	@Override
	public void setLobPrefetchSize(int size) throws SQLException {
		statement.setLobPrefetchSize(size);
	}

	@Override
	public int getRowPrefetch() {
		return statement.getRowPrefetch();
	}

	@Override
	public void setRowPrefetch(int size) throws SQLException {
		statement.setRowPrefetch(size);
	}

	@Override
	public void closeWithKey(String key) throws SQLException {
		statement.closeWithKey(key);
	}

	@Override
	public void setDatabaseChangeRegistration(DatabaseChangeRegistration registration) throws SQLException {
		statement.setDatabaseChangeRegistration(registration);
	}

	@Override
	public long getRegisteredQueryId() throws SQLException {
		return statement.getRegisteredQueryId();
	}

	@Override
	public String[] getRegisteredTableNames() throws SQLException {
		return statement.getRegisteredTableNames();
	}

	@Override
	public void defineColumnType(int columnIndex, int type) throws SQLException {
		statement.defineColumnType(columnIndex, type);
	}

	@Override
	public void defineColumnType(int columnIndex, int type, int lobPrefetchSize) throws SQLException {
		statement.defineColumnType(columnIndex, type, lobPrefetchSize);
	}

	@Override
	public void defineColumnType(int columnIndex, int type, String typeName) throws SQLException {
		statement.defineColumnType(columnIndex, type, typeName);
	}

	@Deprecated
	@Override
	public void defineColumnType(int columnIndex, int type, int lobPrefetchSize, short formOfUse) throws SQLException {
		statement.defineColumnType(columnIndex, type, lobPrefetchSize, formOfUse);
	}

	@Deprecated
	@Override
	public void defineColumnTypeBytes(int columnIndex, int type, int lobPrefetchSize) throws SQLException {
		statement.defineColumnTypeBytes(columnIndex, type, lobPrefetchSize);
	}

	@Deprecated
	@Override
	public void defineColumnTypeChars(int columnIndex, int type, int lobPrefetchSize) throws SQLException {
		statement.defineColumnTypeChars(columnIndex, type, lobPrefetchSize);
	}

	@Override
	public void clearDefines() throws SQLException {
		statement.clearDefines();
	}

}
